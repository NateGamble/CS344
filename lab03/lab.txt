3.1
    a. Depth-first search and min conflicts don't work on the easy puzzle, 
        AC3 and backtracking search both work on the easy puzzle, but AC3 is much
        faster than backtracking. AC3 doesn't work on the harder puzzle. Backtracking should 
        work on the harder sudoku puzzle, but not in any amount of reasonable time (at least 5
        minutes without knowing if it's failed or suceeded)
    b.  Using just the mrv variable for the select_unassigned_variable parameter makes the
        backtracking algorithm take significantly longer on the easy puzzle, but using
        it in combination with forward_checking makes it run really fast. Using just
        forward_checking has no significant time difference from using both with the easy
        sudoku. The difference becomes quite apparent however when trying it on the harder
        puzzle. Just forward_checking runs faster than without, but it still takes a minute.
        Using both mrv and forward_checking solves the puzzle in around a second.
        Using both mrv and forward_checking solves the hardest problem really fast as well.

3.2
    a.  Min-conflicts: Very big. n=5000 took about 10 seconds
        AC3: Big, but not huge. n=300 takes about 10 seconds
        Backtracking: Beyond 27ish, the time increases significantly
    b. mrv makes backtracking search go much faster - from about 50 seconds with n=28 to
        less than a second. Adding forward_checking makes no noticeable difference with small n,
        but significantly saves time with large n. Using only forward_checking makes the
        algorithm take about 25 seconds with n=28, which is a great time save over
        not having any parameters, but lots slower than using mrv. So using mrv
        and forward_checking is the best setting for the backtracking algorithm.
    c. I'm not entirely sure what you mean by this question. Min-conflicts only requires 1
        step to find the correct solution, but the odds for finding the correct solution
        increase with the amount of steps until the number of steps allowed is greater than
        or equal to the number of maximum possible steps.
3.3
    a. Traditional problem solving has each possible move as a state, whereas CSP limits
        states to only moves that satisfy (or keep satisfied) the constraints. CSP has
        more limited domain that each variable can be associated with, where the domain for
        traditional is all possible moves, one of which is generally better than others.
        Traditional search takes an action with the best result, whereas CSP takes an action
        towards satisfying constraints. Traditional has goal tests of "is this the final
        solution?", but CSP can break down the final goal into subgoals and work towards
        satisfying each of those.
    b. The heuristics between traditional and constraint-based problem solving are similar,
        but focus on different things. Traditional search looks for the best solution
        (or next step) it can find and follows that path, with how good each step or solution
        is as the heuristic. Constraint-based uses logic to take the next step that satisfies
        the constraints, then the next and the next until it has found a solution with all
        constraints satisfied.